{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The library api presents information on the contents of the library database. It includes information on books , readers who attend the library and the library halls . The api allows to request more and less specific information from the corresponding tables. The api also provides tools for registering readers as users, allows to edit their profiles and do authorization by token. Quick Start To start using the library api, follow these steps. Install Django and Django Rest Framework: pip install django pip install djangorestframework Clone the repository to your local computer. In order to do that, press the button Git clone in the upper left corner and run the command in your local cmd. Go to the library_app folder and run the command python manage.py runserver Go to localhost:8000/library/ and start using the api. For the list of available endpoints, consult the library docs.","title":"Home"},{"location":"#overview","text":"The library api presents information on the contents of the library database. It includes information on books , readers who attend the library and the library halls . The api allows to request more and less specific information from the corresponding tables. The api also provides tools for registering readers as users, allows to edit their profiles and do authorization by token.","title":"Overview"},{"location":"#quick-start","text":"To start using the library api, follow these steps. Install Django and Django Rest Framework: pip install django pip install djangorestframework Clone the repository to your local computer. In order to do that, press the button Git clone in the upper left corner and run the command in your local cmd. Go to the library_app folder and run the command python manage.py runserver Go to localhost:8000/library/ and start using the api. For the list of available endpoints, consult the library docs.","title":"Quick Start"},{"location":"api/authorization/","text":"Create a new user To create a new user (reader), got to /readers/create . The interface allows to specify various fields such as first name, last name, etc. Authorization Users are authorized by their usernames and password. They can also be identified by an authentification token. To get one, go to /auth/token/login . Edit user data To update user information a user, go to /auth/users/me . You will be able to fill in the fields that have previously been empty or change the values of previously filled ones.","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"api/authorization/#create-a-new-user","text":"To create a new user (reader), got to /readers/create . The interface allows to specify various fields such as first name, last name, etc.","title":"Create a new user"},{"location":"api/authorization/#authorization","text":"Users are authorized by their usernames and password. They can also be identified by an authentification token. To get one, go to /auth/token/login .","title":"Authorization"},{"location":"api/authorization/#edit-user-data","text":"To update user information a user, go to /auth/users/me . You will be able to fill in the fields that have previously been empty or change the values of previously filled ones.","title":"Edit user data"},{"location":"api/book_in_halls/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 BookInHall URL : book_in_halls/ Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"book_cypher\": \"111\", \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_hall\": [ 1 ], \"book_reader\": [ 3, 2 ] }, \"count\": 3, \"hall\": 1 }, { \"id\": 2, \"book\": { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"book_cypher\": \"222\", \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_hall\": [ 2 ], \"book_reader\": [ 22 ] }, \"count\": 2, \"hall\": 2 } ]","title":"BookInHall"},{"location":"api/book_in_halls/#bookinhall","text":"URL : book_in_halls/ Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 BookInHall"},{"location":"api/book_in_halls/#success-responses","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"book_cypher\": \"111\", \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_hall\": [ 1 ], \"book_reader\": [ 3, 2 ] }, \"count\": 3, \"hall\": 1 }, { \"id\": 2, \"book\": { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"book_cypher\": \"222\", \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_hall\": [ 2 ], \"book_reader\": [ 22 ] }, \"count\": 2, \"hall\": 2 } ]","title":"Success Responses"},{"location":"api/halls/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432 URL : halls/ Method : GET Auth required : NO Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 }, { \"id\": 2, \"number\": 2, \"title\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 15 } ]","title":"Hall"},{"location":"api/halls/#_1","text":"URL : halls/ Method : GET Auth required : NO Permissions required : None Data constraints : {}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u043b\u043e\u0432"},{"location":"api/halls/#success-responses","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 }, { \"id\": 2, \"number\": 2, \"title\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 15 } ]","title":"Success Responses"},{"location":"api/books/create_book/","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 URL : books/create/ Method : POST Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 201 Created Content : {[]} { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [], \"book_reader\": [] }","title":"Create"},{"location":"api/books/create_book/#_1","text":"URL : books/create/ Method : POST Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"api/books/create_book/#success-responses","text":"Code : 201 Created Content : {[]} { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [], \"book_reader\": [] }","title":"Success Responses"},{"location":"api/books/edit_book/","text":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443 URL : books/edit/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [] }","title":"Edit"},{"location":"api/books/edit_book/#_1","text":"URL : books/edit/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {}","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"api/books/edit_book/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [] }","title":"Success Responses"},{"location":"api/books/list_books/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433 URL : /books/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [] }, { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"genre\": \"\u041f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u043e\u043c\u0430\u043d\", \"book_cypher\": \"222\", \"book_hall\": [ 2 ], \"book_reader\": [] }","title":"List"},{"location":"api/books/list_books/#_1","text":"URL : /books/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043d\u0438\u0433"},{"location":"api/books/list_books/#success-responses","text":"Code : 200 OK Content : { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [] }, { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"genre\": \"\u041f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u043e\u043c\u0430\u043d\", \"book_cypher\": \"222\", \"book_hall\": [ 2 ], \"book_reader\": [] }","title":"Success Responses"},{"location":"api/books/view_book_info/","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435 URL : books/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 1, \"book_hall\": [ { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 } ], \"book_reader\": [], \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\" }","title":"Retrieve"},{"location":"api/books/view_book_info/#_1","text":"URL : books/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435"},{"location":"api/books/view_book_info/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 1, \"book_hall\": [ { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 } ], \"book_reader\": [], \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\" }","title":"Success Responses"},{"location":"api/reader_books/list_reader_books/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 ReaderBook URL : /reader_books/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2, 12 ] }, \"reader\": { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] }, \"issue_date\": \"2022-01-15\", \"due_date\": \"2022-01-15\" } ]","title":"List"},{"location":"api/reader_books/list_reader_books/#readerbook","text":"URL : /reader_books/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 ReaderBook"},{"location":"api/reader_books/list_reader_books/#success-responses","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2, 12 ] }, \"reader\": { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] }, \"issue_date\": \"2022-01-15\", \"due_date\": \"2022-01-15\" } ]","title":"Success Responses"},{"location":"api/reader_books/return/","text":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c ReaderBook URL : /return/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 5, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3, \"reader\": 12 }","title":"Edit"},{"location":"api/reader_books/return/#readerbook","text":"URL : /return/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {}","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c ReaderBook"},{"location":"api/reader_books/return/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 5, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3, \"reader\": 12 }","title":"Success Responses"},{"location":"api/reader_books/take_out/","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c ReaderBook URL : /take_out/ Method : POST Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 201 Created Content : {[]} { \"id\": 5, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3, \"reader\": 12 }","title":"Create"},{"location":"api/reader_books/take_out/#readerbook","text":"URL : /take_out/ Method : POST Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c ReaderBook"},{"location":"api/reader_books/take_out/#success-responses","text":"Code : 201 Created Content : {[]} { \"id\": 5, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3, \"reader\": 12 }","title":"Success Responses"},{"location":"api/reader_books/view_reader_book_info/","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 ReaderBook URL : /reader_books/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2, 12 ] }, \"reader\": { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] }, \"issue_date\": \"2022-01-15\", \"due_date\": \"2022-01-15\" }","title":"Retrieve"},{"location":"api/reader_books/view_reader_book_info/#readerbook","text":"URL : /reader_books/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 ReaderBook"},{"location":"api/reader_books/view_reader_book_info/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 1, \"book\": { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2, 12 ] }, \"reader\": { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] }, \"issue_date\": \"2022-01-15\", \"due_date\": \"2022-01-15\" }","title":"Success Responses"},{"location":"api/readers/create_reader/","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f URL : readers/create/ Method : POST Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 201 Created Content : {[]} { \"id\": 6, \"last_login\": null, \"is_superuser\": false, \"email\": \"gigi@gmail.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2021-12-09T08:15:02.658504Z\", \"username\": \"gigi1\", \"password\": \"pbkdf2_sha256$260000$hxnH1pah1dXmqP5h7AKSae$1iY662s7MKKoJje0MvGAo7uR9AWPrrpnZmJby1bSlzk=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] }","title":"Create"},{"location":"api/readers/create_reader/#_1","text":"URL : readers/create/ Method : POST Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f"},{"location":"api/readers/create_reader/#success-responses","text":"Code : 201 Created Content : {[]} { \"id\": 6, \"last_login\": null, \"is_superuser\": false, \"email\": \"gigi@gmail.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2021-12-09T08:15:02.658504Z\", \"username\": \"gigi1\", \"password\": \"pbkdf2_sha256$260000$hxnH1pah1dXmqP5h7AKSae$1iY662s7MKKoJje0MvGAo7uR9AWPrrpnZmJby1bSlzk=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] }","title":"Success Responses"},{"location":"api/readers/edit_reader/","text":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f URL : readers/edit/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [] }","title":"Edit"},{"location":"api/readers/edit_reader/#_1","text":"URL : readers/edit/<int:pk>/ Method : GET, PUT, PATCH, DELETE, HEAD, OPTIONS Auth required : YES Permissions required : None Data constraints : {}","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f"},{"location":"api/readers/edit_reader/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [] }","title":"Success Responses"},{"location":"api/readers/list_readers/","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 URL : /readers/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} [ { \"id\": 1, \"last_login\": null, \"is_superuser\": false, \"email\": \"gigi@gmail.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2021-12-09T08:15:02.658504Z\", \"username\": \"gigi1\", \"password\": \"pbkdf2_sha256$260000$hxnH1pah1dXmqP5h7AKSae$1iY662s7MKKoJje0MvGAo7uR9AWPrrpnZmJby1bSlzk=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] } ]","title":"List"},{"location":"api/readers/list_readers/#_1","text":"URL : /readers/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"api/readers/list_readers/#success-responses","text":"Code : 200 OK Content : {[]} [ { \"id\": 1, \"last_login\": null, \"is_superuser\": false, \"email\": \"gigi@gmail.com\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2021-12-09T08:15:02.658504Z\", \"username\": \"gigi1\", \"password\": \"pbkdf2_sha256$260000$hxnH1pah1dXmqP5h7AKSae$1iY662s7MKKoJje0MvGAo7uR9AWPrrpnZmJby1bSlzk=\", \"card_number\": null, \"first_name\": null, \"last_name\": null, \"passport\": null, \"date_of_birth\": null, \"address\": null, \"phone\": null, \"education\": \"-\", \"degree\": false, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [] } ]","title":"Success Responses"},{"location":"api/readers/view_reader_info/","text":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 URL : readers/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {} Success Responses Code : 200 OK Content : {[]} { \"id\": 2, \"reader_hall\": { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 }, \"reader_book\": [], \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"groups\": [], \"user_permissions\": [ 20 ] }","title":"Retrieve"},{"location":"api/readers/view_reader_info/#_1","text":"URL : readers/<int:pk>/ Method : GET Auth required : YES Permissions required : None Data constraints : {}","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435"},{"location":"api/readers/view_reader_info/#success-responses","text":"Code : 200 OK Content : {[]} { \"id\": 2, \"reader_hall\": { \"id\": 1, \"number\": 1, \"title\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"capacity\": 10 }, \"reader_book\": [], \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"groups\": [], \"user_permissions\": [ 20 ] }","title":"Success Responses"},{"location":"labs/conclusion/","text":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u00ab\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u00bb , \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0439 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c. \u041e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043d\u0438\u0433\u0430\u0445 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443 \u0438 \u0432\u044b\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0438\u0437\u0443\u0447\u0435\u043d \u0438 \u043e\u0441\u0432\u043e\u0435\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b Django REST Framework , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a djoser \u0438 django-filter . \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Vue.js (Vuetify) . \u0411\u044b\u043b\u043e \u043e\u0441\u0432\u043e\u0435\u043d\u043e \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438 Docker \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 PostgreSQL . \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0441\u0435\u0440\u0432\u0438\u0441 MkDocs . \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0437\u043d\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0432\u044b\u043a\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u00ab\u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb.","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"labs/introduction/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0412 5 - 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0435 (2021 - 2022 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u0433\u043e\u0434) \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u00ab\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u00bb . \u041e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043d\u0438\u0433 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u0432\u044b\u0434\u0430\u0447\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) . \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 djoser \u0438 django-filter .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"labs/introduction/#_1","text":"\u0412 5 - 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0435 (2021 - 2022 \u0443\u0447\u0435\u0431\u043d\u044b\u0439 \u0433\u043e\u0434) \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u00ab\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u00bb . \u041e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043a\u043d\u0438\u0433 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0414\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0443 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u0432\u044b\u0434\u0430\u0447\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) . \u0422\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 djoser \u0438 django-filter .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"labs/models/","text":"Book \u041a\u043d\u0438\u0433\u0430: title - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 authors - \u0430\u0432\u0442\u043e\u0440\u044b publisher - \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e publication year - \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f genre - \u0436\u0430\u043d\u0440 book cypher - \u0448\u0438\u0444\u0440 halls (FK) - \u0432 \u043a\u0430\u043a\u0438\u0445 \u0437\u0430\u043b\u0430\u0445 \u0435\u0441\u0442\u044c \u044d\u0442\u0430 \u043a\u043d\u0438\u0433\u0430 readers (FK) - \u043a\u0442\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443 Reader \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c (\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 Django AbstractUser): username - \u043b\u043e\u0433\u0438\u043d password - \u043f\u0430\u0440\u043e\u043b\u044c card number - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 card number old - \u0441\u0442\u0430\u0440\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 first name - \u0438\u043c\u044f last name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f passport - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 date of birth - \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f address - \u0430\u0434\u0440\u0435\u0441 phone - \u0442\u0435\u043b\u0435\u0444\u043e\u043d education - \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 degree - \u0435\u0441\u0442\u044c \u043b\u0438 \u0443\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c hall (FK) - \u0432 \u043a\u0430\u043a\u043e\u043c \u0437\u0430\u043b\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c books (FK) - \u043a\u0430\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 Hall \u0417\u0430\u043b: number - \u043d\u043e\u043c\u0435\u0440 title - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 capacity - \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c ReaderBook \u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043a\u043d\u0438\u0433\u0443 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f: book (FK) - \u043a\u043d\u0438\u0433\u0430 reader (FK) - \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c issue_date - \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 due_date - \u0441\u0440\u043e\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 BookInHall \u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043a\u043d\u0438\u0433\u0443 \u0438 \u0437\u0430\u043b: book (FK) - \u043a\u043d\u0438\u0433\u0430 hall (FK) - \u0437\u0430\u043b count - \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u044d\u0442\u043e\u043c \u0437\u0430\u043b\u0435","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/models/#book","text":"\u041a\u043d\u0438\u0433\u0430: title - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 authors - \u0430\u0432\u0442\u043e\u0440\u044b publisher - \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e publication year - \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f genre - \u0436\u0430\u043d\u0440 book cypher - \u0448\u0438\u0444\u0440 halls (FK) - \u0432 \u043a\u0430\u043a\u0438\u0445 \u0437\u0430\u043b\u0430\u0445 \u0435\u0441\u0442\u044c \u044d\u0442\u0430 \u043a\u043d\u0438\u0433\u0430 readers (FK) - \u043a\u0442\u043e \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443","title":"Book"},{"location":"labs/models/#reader","text":"\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c (\u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 Django AbstractUser): username - \u043b\u043e\u0433\u0438\u043d password - \u043f\u0430\u0440\u043e\u043b\u044c card number - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 card number old - \u0441\u0442\u0430\u0440\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 first name - \u0438\u043c\u044f last name - \u0444\u0430\u043c\u0438\u043b\u0438\u044f passport - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 date of birth - \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f address - \u0430\u0434\u0440\u0435\u0441 phone - \u0442\u0435\u043b\u0435\u0444\u043e\u043d education - \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 degree - \u0435\u0441\u0442\u044c \u043b\u0438 \u0443\u0447\u0435\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c hall (FK) - \u0432 \u043a\u0430\u043a\u043e\u043c \u0437\u0430\u043b\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c books (FK) - \u043a\u0430\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442","title":"Reader"},{"location":"labs/models/#hall","text":"\u0417\u0430\u043b: number - \u043d\u043e\u043c\u0435\u0440 title - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 capacity - \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c","title":"Hall"},{"location":"labs/models/#readerbook","text":"\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043a\u043d\u0438\u0433\u0443 \u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f: book (FK) - \u043a\u043d\u0438\u0433\u0430 reader (FK) - \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c issue_date - \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 due_date - \u0441\u0440\u043e\u043a \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430","title":"ReaderBook"},{"location":"labs/models/#bookinhall","text":"\u0410\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c, \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u043a\u043d\u0438\u0433\u0443 \u0438 \u0437\u0430\u043b: book (FK) - \u043a\u043d\u0438\u0433\u0430 hall (FK) - \u0437\u0430\u043b count - \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u044d\u0442\u043e\u043c \u0437\u0430\u043b\u0435","title":"BookInHall"},{"location":"labs/title/","text":"\u041c\u0418\u041d\u0418\u0421\u0422\u0415\u0420\u0421\u0422\u0412\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0418 \u041d\u0410\u0423\u041a\u0418 \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u0420\u041c\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419, \u041c\u0415\u0425\u0410\u041d\u0418\u041a\u0418 \u0418 \u041e\u041f\u0422\u0418\u041a\u0418 \u0424\u0410\u041a\u0423\u041b\u042c\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u041a\u041e\u041c\u041c\u0423\u041d\u0418\u041a\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419 \u041e\u0422\u0427\u0415\u0422 \u043e \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430 \u0442\u0435\u043c\u0443 \u00ab\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0430 \u0413\u043e\u043b\u0443\u0431 \u0410.\u041b. \u0433\u0440\u0443\u043f\u043f\u0430 \u041a33421 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410. \u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"labs/docker/docker/","text":"Docker + Docker compose Database settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'library_db', 'USER': 'postgres', 'PASSWORD': 'postgrespwd', 'HOST': 'db', 'PORT': '5432', } } Backend Dockerfile FROM python:3 ENV PYTHONUNBUFFERED 1 RUN mkdir /code WORKDIR /code/library_project COPY . /code/ RUN pip install -r requirements.txt requirements.txt Django==4.0.4 djangorestframework==3.13.1 psycopg2==2.9.3 djoser==2.1.0 pandas==1.4.0 drf_yasg==1.20.0 django-cors-headers==3.11.0 Frontend Dockerfile FROM node:lts-alpine WORKDIR /code/vue_library COPY package*.json ./ COPY . /code EXPOSE 8080 RUN npm install -g npm RUN npm install -g @vue/cli RUN npm install Docker-compose docker-compose.yml version: '3' services: db: image: postgres:13.0-alpine volumes: - ./data/db:/var/lib/postgresql/data/ environment: - POSTGRES_DB=library_db - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres ports: - \"5432:5432\" django_rest_framework: build: context: . dockerfile: library_project/Dockerfile container_name: library-backend command: bash -c 'sleep 10 && python manage.py runserver 0.0.0.0:8000' volumes: - .:/code ports: - \"8000:8000\" depends_on: - db vue: build: context: . dockerfile: vue_library/Dockerfile container_name: library-frontend command: npm run serve volumes: - .:/code ports: - \"8080:8080\" depends_on: - django_rest_framework Commands docker-compose build docker-compose up docker exec -it 1af3b02268a6 bash python manage.py migrate - \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 postgres","title":"1.1. Docker + Docker compose"},{"location":"labs/docker/docker/#docker-docker-compose","text":"","title":"Docker + Docker compose"},{"location":"labs/docker/docker/#database","text":"settings.py DATABASES = { 'default': { 'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': 'library_db', 'USER': 'postgres', 'PASSWORD': 'postgrespwd', 'HOST': 'db', 'PORT': '5432', } }","title":"Database"},{"location":"labs/docker/docker/#backend","text":"Dockerfile FROM python:3 ENV PYTHONUNBUFFERED 1 RUN mkdir /code WORKDIR /code/library_project COPY . /code/ RUN pip install -r requirements.txt requirements.txt Django==4.0.4 djangorestframework==3.13.1 psycopg2==2.9.3 djoser==2.1.0 pandas==1.4.0 drf_yasg==1.20.0 django-cors-headers==3.11.0","title":"Backend"},{"location":"labs/docker/docker/#frontend","text":"Dockerfile FROM node:lts-alpine WORKDIR /code/vue_library COPY package*.json ./ COPY . /code EXPOSE 8080 RUN npm install -g npm RUN npm install -g @vue/cli RUN npm install","title":"Frontend"},{"location":"labs/docker/docker/#docker-compose","text":"docker-compose.yml version: '3' services: db: image: postgres:13.0-alpine volumes: - ./data/db:/var/lib/postgresql/data/ environment: - POSTGRES_DB=library_db - POSTGRES_USER=postgres - POSTGRES_PASSWORD=postgres ports: - \"5432:5432\" django_rest_framework: build: context: . dockerfile: library_project/Dockerfile container_name: library-backend command: bash -c 'sleep 10 && python manage.py runserver 0.0.0.0:8000' volumes: - .:/code ports: - \"8000:8000\" depends_on: - db vue: build: context: . dockerfile: vue_library/Dockerfile container_name: library-frontend command: npm run serve volumes: - .:/code ports: - \"8080:8080\" depends_on: - django_rest_framework","title":"Docker-compose"},{"location":"labs/docker/docker/#commands","text":"docker-compose build docker-compose up docker exec -it 1af3b02268a6 bash python manage.py migrate - \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 postgres","title":"Commands"},{"location":"labs/docker/migrations/","text":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Reader \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f Education \u0441 \u043d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435 \u0438 \u043d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435 \u0438 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 . \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435 docker ps -a docker start 94c07c8b30ea docker exec -it 94c07c8b30ea bash python manage.py makemigrations python manage.py migrate exit docker stop 94c07c8b30ea","title":"1.2. \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430"},{"location":"labs/docker/migrations/#_1","text":"","title":"\u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430"},{"location":"labs/docker/migrations/#_2","text":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0430 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Reader \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f Education \u0441 \u043d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435 \u0438 \u043d\u0435\u043e\u043a\u043e\u043d\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u0435 \u0432\u044b\u0441\u0448\u0435\u0435 \u0438 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 .","title":"\u0412\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"labs/docker/migrations/#_3","text":"docker ps -a docker start 94c07c8b30ea docker exec -it 94c07c8b30ea bash python manage.py makemigrations python manage.py migrate exit docker stop 94c07c8b30ea","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435"},{"location":"labs/docker/postgres_db/","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f postgres \u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 postgres , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 python manage.py migrate . \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 postgres \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: 1. create user library_user with encrypted password 'librarypwd'; 2. grant all privileges on database library_db to library_user;","title":"1.3. Postgres DB"},{"location":"labs/docker/postgres_db/#postgres","text":"\u0427\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 postgres , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 python manage.py migrate . \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 postgres \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: 1. create user library_user with encrypted password 'librarypwd'; 2. grant all privileges on database library_db to library_user;","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f postgres"},{"location":"labs/drf_features/automated_filters/","text":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u0442\u0435 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u0435 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f. filters.py class ReaderDateOfBirthFilter(filters.FilterSet): class Meta: model = Reader fields = ['date_of_birth'] views.py class ReaderDateOfBirthFilterView(ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer filter_backends = (DjangoFilterBackend,) filterset_class = ReaderDateOfBirthFilter URL : /readers/filter/date_of_birth/ Content : [ { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] } ] \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u043e\u043b\u044f\u043c \u041f\u043e\u0438\u0441\u043a \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0438 \u0438\u043c\u0435\u043d\u0438 \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043d\u0438\u0433\u0438. views.py class BookSearchView(ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = (DjangoFilterBackend, SearchFilter) search_fields = ['title', 'authors'] URL : /books/filter/search/ Content : [ { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"genre\": \"\u041f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u043e\u043c\u0430\u043d\", \"book_cypher\": \"222\", \"book_hall\": [ 2 ], \"book_reader\": [] }, { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [ 1 ], \"book_reader\": [ 1, 1, 12 ] } ] \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043d\u0438\u0433\u0438 \u0441\u0440\u0435\u0434\u0438 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e. views.py class ReaderBookAuthorView(ListAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer filter_backends = (DjangoFilterBackend,) filter_fields = ('book__title',) URL : /reader_books/filter/ Content : [ { \"id\": 3, \"reader\": { \"id\": 1, \"first_name\": \"\u0410\u043d\u043d\u0430\", \"last_name\": \"\u0413\u043e\u043b\u0443\u0431\" }, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3 }, { \"id\": 5, \"reader\": { \"id\": 12, \"first_name\": \"Anna\", \"last_name\": \"Duba\" }, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3 } ] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u041e\u0442\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f. filters.py class ReaderDateOfBirthRangeFilter(filters.FilterSet): date_of_birth = filters.DateFromToRangeFilter() ordering = filters.OrderingFilter( fields=( ('date_of_birth', 'date_of_birth'), ) ) class Meta: model = Reader fields = ['date_of_birth'] views.py class ReaderDateOfBirthFilterView(ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer filter_backends = (filters.DjangoFilterBackend,) filterset_class = ReaderDateOfBirthFilter URL : /readers/filter/date_of_birth-range/ Content : [ { \"id\": 2, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"date_of_birth\": \"2000-10-10\" }, { \"id\": 3, \"first_name\": \"Ivan\", \"last_name\": \"Petrov\", \"date_of_birth\": \"2001-03-03\" }, { \"id\": 12, \"first_name\": \"Anna\", \"last_name\": \"Duba\", \"date_of_birth\": \"2002-01-04\" } ]","title":"2.1.2. \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"labs/drf_features/automated_filters/#_1","text":"","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"labs/drf_features/automated_filters/#_2","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u0430\u0442\u0435 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f. filters.py class ReaderDateOfBirthFilter(filters.FilterSet): class Meta: model = Reader fields = ['date_of_birth'] views.py class ReaderDateOfBirthFilterView(ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer filter_backends = (DjangoFilterBackend,) filterset_class = ReaderDateOfBirthFilter URL : /readers/filter/date_of_birth/ Content : [ { \"id\": 2, \"last_login\": null, \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": false, \"date_joined\": \"2021-12-08T11:50:26.300755Z\", \"username\": \"alina\", \"password\": \"11r11\", \"card_number\": 1, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"passport\": \"1111111111\", \"date_of_birth\": \"2000-10-10\", \"address\": \"\u0433. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433\", \"phone\": \"89111111111\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": false, \"reader_hall\": 1, \"groups\": [], \"user_permissions\": [ 20 ], \"reader_book\": [ 1 ] } ]","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u0442\u0435"},{"location":"labs/drf_features/automated_filters/#_3","text":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0438 \u0438\u043c\u0435\u043d\u0438 \u0430\u0432\u0442\u043e\u0440\u0430 \u043a\u043d\u0438\u0433\u0438. views.py class BookSearchView(ListAPIView): queryset = Book.objects.all() serializer_class = BookSerializer filter_backends = (DjangoFilterBackend, SearchFilter) search_fields = ['title', 'authors'] URL : /books/filter/search/ Content : [ { \"id\": 2, \"title\": \"\u042f\u043d\u043a\u0438 \u043f\u0440\u0438 \u0434\u0432\u043e\u0440\u0435 \u043a\u043e\u0440\u043e\u043b\u044f \u0410\u0440\u0442\u0443\u0440\u0430\", \"authors\": \"\u041c\u0430\u0440\u043a \u0422\u0432\u0435\u043d\", \"publisher\": \"\u0417\u0430\u0440\u0443\u0431\u0435\u0436\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1910, \"genre\": \"\u041f\u0440\u0438\u043a\u043b\u044e\u0447\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0439 \u0440\u043e\u043c\u0430\u043d\", \"book_cypher\": \"222\", \"book_hall\": [ 2 ], \"book_reader\": [] }, { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [ 1 ], \"book_reader\": [ 1, 1, 12 ] } ]","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u043e\u043b\u044f\u043c"},{"location":"labs/drf_features/automated_filters/#_4","text":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043d\u0438\u0433\u0438 \u0441\u0440\u0435\u0434\u0438 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e. views.py class ReaderBookAuthorView(ListAPIView): queryset = ReaderBook.objects.all() serializer_class = ReaderBookSerializer filter_backends = (DjangoFilterBackend,) filter_fields = ('book__title',) URL : /reader_books/filter/ Content : [ { \"id\": 3, \"reader\": { \"id\": 1, \"first_name\": \"\u0410\u043d\u043d\u0430\", \"last_name\": \"\u0413\u043e\u043b\u0443\u0431\" }, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3 }, { \"id\": 5, \"reader\": { \"id\": 12, \"first_name\": \"Anna\", \"last_name\": \"Duba\" }, \"issue_date\": \"2020-02-23\", \"due_date\": \"2020-02-23\", \"book\": 3 } ]","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b"},{"location":"labs/drf_features/automated_filters/#_5","text":"\u041e\u0442\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f. filters.py class ReaderDateOfBirthRangeFilter(filters.FilterSet): date_of_birth = filters.DateFromToRangeFilter() ordering = filters.OrderingFilter( fields=( ('date_of_birth', 'date_of_birth'), ) ) class Meta: model = Reader fields = ['date_of_birth'] views.py class ReaderDateOfBirthFilterView(ListAPIView): queryset = Reader.objects.all() serializer_class = ReaderSerializer filter_backends = (filters.DjangoFilterBackend,) filterset_class = ReaderDateOfBirthFilter URL : /readers/filter/date_of_birth-range/ Content : [ { \"id\": 2, \"first_name\": \"Alina\", \"last_name\": \"Ivanova\", \"date_of_birth\": \"2000-10-10\" }, { \"id\": 3, \"first_name\": \"Ivan\", \"last_name\": \"Petrov\", \"date_of_birth\": \"2001-03-03\" }, { \"id\": 12, \"first_name\": \"Anna\", \"last_name\": \"Duba\", \"date_of_birth\": \"2002-01-04\" } ]","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0434\u0430\u0442 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"labs/drf_features/files/","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u041c\u043e\u0434\u0435\u043b\u044c def get_upload_path(instance, filename): return os.path.join('book_covers', str(instance.book), filename) class BookCover(models.Model): book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438') filename = models.CharField(max_length=50, verbose_name='\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430', blank=True, null=True) file_size = models.IntegerField(verbose_name=\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430\", blank=True, null=True) file = models.FileField(validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) filename = file.name def __str__(self): return '\u041e\u0431\u043b\u043e\u0436\u043a\u0430 ' + str(self.book) def save(self, *args, **kwargs): self.file_size = self.file.size print('self.book =', self.book) super(BookCover, self).save(*args, **kwargs) settings.py : MEDIA_ROOT = 'media/' \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 def validate_file_size(file_upload): limit = 200 * 1024 * 1024 # 200 MiB # limit = 2 * 1024 # 2 KB if file_upload.size > limit: raise ValidationError('The file is too large. ' 'File size limit is %d.' % limit) \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0442\u0438\u043f\u0430 \u0444\u0430\u0439\u043b\u0430 def validate_file_type(file_upload): possible_extensions = ('image/png', 'image/jpeg', 'text/plain', # .txt 'text/x-python', # .py ) content_type = magic.from_buffer(file_upload.read(), mime=True) if content_type not in possible_extensions: raise ValidationError('Files of type %s are not supported.' % content_type) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 URL : book_cover_upload/ views.py class BookCoverCreateView(CreateAPIView): queryset = BookCover.objects.all() serializer_class = BookCoverSerializer serializers.py class BookCoverSerializer(serializers.ModelSerializer): class Meta: model = BookCover fields = ['book', 'file'] \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 URL : book_cover_multiple/ views.py class BookCoverMultipleView(CreateAPIView): queryset = BookCover.objects.all() serializer_class = BookCoverSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for f in files: book_id = request.POST.get('book') file_instance = BookCover(book=Book.objects.get(id=book_id), file=f) file_instance.save() return Response(request.data, status=status.HTTP_201_CREATED)","title":"2.3. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"labs/drf_features/files/#_1","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"labs/drf_features/files/#_2","text":"def get_upload_path(instance, filename): return os.path.join('book_covers', str(instance.book), filename) class BookCover(models.Model): book = models.ForeignKey('Book', on_delete=models.CASCADE, verbose_name='\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438') filename = models.CharField(max_length=50, verbose_name='\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430', blank=True, null=True) file_size = models.IntegerField(verbose_name=\"\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430\", blank=True, null=True) file = models.FileField(validators=[validate_file_size, validate_file_type], upload_to=get_upload_path ) filename = file.name def __str__(self): return '\u041e\u0431\u043b\u043e\u0436\u043a\u0430 ' + str(self.book) def save(self, *args, **kwargs): self.file_size = self.file.size print('self.book =', self.book) super(BookCover, self).save(*args, **kwargs) settings.py : MEDIA_ROOT = 'media/'","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"labs/drf_features/files/#_3","text":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 def validate_file_size(file_upload): limit = 200 * 1024 * 1024 # 200 MiB # limit = 2 * 1024 # 2 KB if file_upload.size > limit: raise ValidationError('The file is too large. ' 'File size limit is %d.' % limit) \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0442\u0438\u043f\u0430 \u0444\u0430\u0439\u043b\u0430 def validate_file_type(file_upload): possible_extensions = ('image/png', 'image/jpeg', 'text/plain', # .txt 'text/x-python', # .py ) content_type = magic.from_buffer(file_upload.read(), mime=True) if content_type not in possible_extensions: raise ValidationError('Files of type %s are not supported.' % content_type)","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f"},{"location":"labs/drf_features/files/#_4","text":"URL : book_cover_upload/ views.py class BookCoverCreateView(CreateAPIView): queryset = BookCover.objects.all() serializer_class = BookCoverSerializer serializers.py class BookCoverSerializer(serializers.ModelSerializer): class Meta: model = BookCover fields = ['book', 'file']","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430"},{"location":"labs/drf_features/files/#_5","text":"URL : book_cover_multiple/ views.py class BookCoverMultipleView(CreateAPIView): queryset = BookCover.objects.all() serializer_class = BookCoverSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for f in files: book_id = request.POST.get('book') file_instance = BookCover(book=Book.objects.get(id=book_id), file=f) file_instance.save() return Response(request.data, status=status.HTTP_201_CREATED)","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"labs/drf_features/manual_filters/","text":"\u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u043f\u043e \u0436\u0430\u043d\u0440\u0443. views.py class BookFilterView(ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() genre = self.request.query_params.get('genre') if genre is not None: queryset = queryset.filter(genre=genre) return queryset URL : books/filter/?genre=\u041f\u043e\u044d\u043c\u0430 Content : [ { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [ 1 ], \"book_reader\": [ 1, 1, 12 ] } ] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u043f\u043e \u0436\u0430\u043d\u0440\u0443 \u0438 \u0430\u0432\u0442\u043e\u0440\u0443. views.py class BookFilterView(ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() genre = self.request.query_params.get('genre') author = self.request.query_params.get('author') if genre is not None: queryset = queryset.filter(genre=genre) if author is not None: queryset = queryset.filter(authors=author) return queryset URL : books/filter/?genre=\u0420\u043e\u043c\u0430\u043d&author=\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439 Content : [ { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2 ] } ] \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. views.py class ReaderFilterView(ListAPIView): serializer_class = ReaderSerializer def get_queryset(self): queryset = Reader.objects.all() if self.request.user.is_authenticated: education = self.request.query_params.get('education') degree = self.request.query_params.get('degree') if degree is not None: queryset = queryset.filter(degree=degree) if education is not None: queryset = queryset.filter(education=education) return queryset URL : http://localhost:8000/library/readers/filter/?education=\u0412\u044b\u0441\u0448\u0435\u0435&degree=True Content : (\u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f) [ { \"id\": 12, \"last_login\": \"2022-01-18T13:22:09.332248Z\", \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-01-15T22:02:51.909738Z\", \"username\": \"annaduba\", \"password\": \"pbkdf2_sha256$260000$fF06owTCgAScvcPsWdYj60$n+aNBVEm7CfVUgLHHH1qdIPi1nUsEEPmQh9yk4FqAUs=\", \"card_number\": 333, \"first_name\": \"Anna\", \"last_name\": \"Duba\", \"passport\": \"1278888888\", \"date_of_birth\": \"2022-01-04\", \"address\": \"\u0421\u041f\u0431, \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439 \u0440\u0430\u0439\u043e\u043d\", \"phone\": \"89114765777\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": true, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [ 3 ] } ]","title":"2.1.1. \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"labs/drf_features/manual_filters/#_1","text":"","title":"\u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"labs/drf_features/manual_filters/#_2","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u043f\u043e \u0436\u0430\u043d\u0440\u0443. views.py class BookFilterView(ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() genre = self.request.query_params.get('genre') if genre is not None: queryset = queryset.filter(genre=genre) return queryset URL : books/filter/?genre=\u041f\u043e\u044d\u043c\u0430 Content : [ { \"id\": 3, \"title\": \"\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041e\u043d\u0435\u0433\u0438\u043d\", \"authors\": \"\u0410. \u041f\u0443\u0448\u043a\u0438\u043d\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1957, \"genre\": \"\u041f\u043e\u044d\u043c\u0430\", \"book_cypher\": \"444\", \"book_hall\": [ 1 ], \"book_reader\": [ 1, 1, 12 ] } ]","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0443"},{"location":"labs/drf_features/manual_filters/#_3","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u043f\u043e \u0436\u0430\u043d\u0440\u0443 \u0438 \u0430\u0432\u0442\u043e\u0440\u0443. views.py class BookFilterView(ListAPIView): serializer_class = BookSerializer def get_queryset(self): queryset = Book.objects.all() genre = self.request.query_params.get('genre') author = self.request.query_params.get('author') if genre is not None: queryset = queryset.filter(genre=genre) if author is not None: queryset = queryset.filter(authors=author) return queryset URL : books/filter/?genre=\u0420\u043e\u043c\u0430\u043d&author=\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439 Content : [ { \"id\": 1, \"title\": \"\u0412\u043e\u0439\u043d\u0430 \u0438 \u043c\u0438\u0440\", \"authors\": \"\u041b. \u0422\u043e\u043b\u0441\u0442\u043e\u0439\", \"publisher\": \"\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u043a\u0430\", \"publication_year\": 1888, \"genre\": \"\u0420\u043e\u043c\u0430\u043d\", \"book_cypher\": \"111\", \"book_hall\": [ 1 ], \"book_reader\": [ 2 ] } ]","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c"},{"location":"labs/drf_features/manual_filters/#_4","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. views.py class ReaderFilterView(ListAPIView): serializer_class = ReaderSerializer def get_queryset(self): queryset = Reader.objects.all() if self.request.user.is_authenticated: education = self.request.query_params.get('education') degree = self.request.query_params.get('degree') if degree is not None: queryset = queryset.filter(degree=degree) if education is not None: queryset = queryset.filter(education=education) return queryset URL : http://localhost:8000/library/readers/filter/?education=\u0412\u044b\u0441\u0448\u0435\u0435&degree=True Content : (\u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f) [ { \"id\": 12, \"last_login\": \"2022-01-18T13:22:09.332248Z\", \"is_superuser\": false, \"email\": \"\", \"is_staff\": false, \"is_active\": true, \"date_joined\": \"2022-01-15T22:02:51.909738Z\", \"username\": \"annaduba\", \"password\": \"pbkdf2_sha256$260000$fF06owTCgAScvcPsWdYj60$n+aNBVEm7CfVUgLHHH1qdIPi1nUsEEPmQh9yk4FqAUs=\", \"card_number\": 333, \"first_name\": \"Anna\", \"last_name\": \"Duba\", \"passport\": \"1278888888\", \"date_of_birth\": \"2022-01-04\", \"address\": \"\u0421\u041f\u0431, \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0441\u043a\u0438\u0439 \u0440\u0430\u0439\u043e\u043d\", \"phone\": \"89114765777\", \"education\": \"\u0412\u044b\u0441\u0448\u0435\u0435\", \"degree\": true, \"reader_hall\": null, \"groups\": [], \"user_permissions\": [], \"reader_book\": [ 3 ] } ]","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c \u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"labs/drf_features/pagination/","text":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f settings.py REST_FRAMEWORK = { ... 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 1, } URL : library/books/ \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f pagination.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response(OrderedDict([ ('count', self.page.paginator.count), ('current_page', self.page.number), ('next', self.get_next_link()), ('previous', self.get_previous_link()), ('results', data) ])) views.py class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() pagination_class = CustomPagination URL : library/readers/","title":"2.2. \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"labs/drf_features/pagination/#_1","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"labs/drf_features/pagination/#_2","text":"settings.py REST_FRAMEWORK = { ... 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', 'PAGE_SIZE': 1, } URL : library/books/","title":"\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"labs/drf_features/pagination/#_3","text":"pagination.py class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response(OrderedDict([ ('count', self.page.paginator.count), ('current_page', self.page.number), ('next', self.get_next_link()), ('previous', self.get_previous_link()), ('results', data) ])) views.py class ReaderListAPIView(ListAPIView): serializer_class = ReaderSerializer queryset = Reader.objects.all() pagination_class = CustomPagination URL : library/readers/","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"labs/drf_features/signals/","text":"\u0421\u0438\u0433\u043d\u0430\u043b\u044b \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433. signals.py @receiver(pre_save, sender=Book) def on_create_book(sender, instance, **kwargs): if instance.id is None: print('A new Book instance created: %s, %s\\n' % (instance.title, instance.authors)) apps.py class LibraryAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'library_app' def ready(self): from . import signals \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435. signals.py @receiver(pre_save, sender=Reader) def on_change_reader_card_number(sender, instance, **kwargs): if instance.id is not None: previous = Reader.objects.get(id=instance.id) if previous.card_number != instance.card_number: instance.card_number_old = previous.card_number print('Reader card number updated: old = %s, new = %s' % (instance.card_number_old, instance.card_number)) \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043a\u043d\u0438\u0433\u0438 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b delete_log.txt . @receiver(pre_delete, sender=Book) def on_delete_book(sender, instance, **kwargs): with open('delete_log.txt', 'a') as log_file: log_file.write('Deleted Book instance: %s, %s' % (instance.title, instance.authors))","title":"2.4. \u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"labs/drf_features/signals/#_1","text":"","title":"\u0421\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"labs/drf_features/signals/#_2","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433. signals.py @receiver(pre_save, sender=Book) def on_create_book(sender, instance, **kwargs): if instance.id is None: print('A new Book instance created: %s, %s\\n' % (instance.title, instance.authors)) apps.py class LibraryAppConfig(AppConfig): default_auto_field = 'django.db.models.BigAutoField' name = 'library_app' def ready(self): from . import signals","title":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"labs/drf_features/signals/#_3","text":"\u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0441\u0442\u0430\u0440\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435. signals.py @receiver(pre_save, sender=Reader) def on_change_reader_card_number(sender, instance, **kwargs): if instance.id is not None: previous = Reader.objects.get(id=instance.id) if previous.card_number != instance.card_number: instance.card_number_old = previous.card_number print('Reader card number updated: old = %s, new = %s' % (instance.card_number_old, instance.card_number))","title":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430"},{"location":"labs/drf_features/signals/#_4","text":"\u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043a\u043d\u0438\u0433\u0438 \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b delete_log.txt . @receiver(pre_delete, sender=Book) def on_delete_book(sender, instance, **kwargs): with open('delete_log.txt', 'a') as log_file: log_file.write('Deleted Book instance: %s, %s' % (instance.title, instance.authors))","title":"\u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043b\u044e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c"},{"location":"labs/frontend/filters/","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u043e Vue.js \u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. URL : library/books/ \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0438\u043b\u0438 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u043f\u043e: * \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e * \u0430\u0432\u0442\u043e\u0440\u0443 * \u0433\u043e\u0434\u0443 \u0438\u0437\u0434\u0430\u043d\u0438\u044f \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u041f\u043e\u043b\u0435, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e, \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0438\u043c. \u041d\u0430\u0436\u0430\u0432 \u043d\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u0435\u0439. \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439. \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u041f\u043e\u0438\u0441\u043a \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0438 \u0438\u043c\u0435\u043d\u0430\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432. \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438 \u041c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0436\u0430\u043d\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435. \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0433\u043e\u0434\u0430 \u0438\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430"},{"location":"labs/frontend/filters/#vuejs","text":"\u041d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. URL : library/books/","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u043e Vue.js"},{"location":"labs/frontend/filters/#_1","text":"\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0438\u043b\u0438 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u043f\u043e: * \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e * \u0430\u0432\u0442\u043e\u0440\u0443 * \u0433\u043e\u0434\u0443 \u0438\u0437\u0434\u0430\u043d\u0438\u044f \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438. \u041f\u043e\u043b\u0435, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043e, \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0438\u043c. \u041d\u0430\u0436\u0430\u0432 \u043d\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043d\u0435\u0439.","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"},{"location":"labs/frontend/filters/#_2","text":"\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439.","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"labs/frontend/filters/#_3","text":"\u041f\u043e\u0438\u0441\u043a \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0438 \u0438\u043c\u0435\u043d\u0430\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432.","title":"\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c"},{"location":"labs/frontend/filters/#_4","text":"\u041c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0436\u0430\u043d\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438"},{"location":"labs/frontend/filters/#_5","text":"\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0433\u043e\u0434\u0430 \u0438\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d"},{"location":"labs/frontend/halls/","text":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0437\u0430\u043b\u043e\u0432. \u0414\u0430\u043d\u044b \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u044d\u0442\u0438\u0445 \u0437\u0430\u043b\u0430\u0445, \u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438.","title":"\u0417\u0430\u043b\u044b"},{"location":"labs/frontend/navdrawer/","text":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u043c\u0435\u043d\u044e \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0430\u0439\u0442\u0443. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d","title":"\u041c\u0435\u043d\u044e"},{"location":"labs/frontend/navdrawer/#_1","text":"","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d"},{"location":"labs/frontend/navdrawer/#_2","text":"","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d"},{"location":"labs/tests/get_tests/","text":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435 URL : /books/1/ class BookRetrieveTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_retrieve_book(self): url = reverse('library_app:books_retrieve', args=['1']) data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 URL : /readers/1/ class ReaderRetrieveTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_retrieve_reader(self): self.maxDiff = None url = reverse('library_app:readers_retrieve', args=['1']) today = str(datetime.date.today()) data = { 'id': 1, 'last_login': None, 'is_superuser': False, 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': today, 'username': '', 'password': '', 'card_number': 111, 'card_number_old': None, 'first_name': 'Lina', 'last_name': 'Anil', 'passport': '1111111111', 'date_of_birth': '1990-09-09', 'address': '...', 'phone': '89111111111', 'education': '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', 'degree': False, 'reader_hall': None, 'groups': [], 'user_permissions': [], 'reader_book': [] } request_data = {k: v for k, v in data.items() if v is not None} response = self.client.get(url, request_data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) response_data = response.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data) \u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u0445 \u0438 \u0430\u0432\u0442\u043e\u0440\u0430\u0445 \u043a\u043d\u0438\u0433 URL : /books/filter/search/ class BookFilterSearchTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_search_book(self): self.maxDiff = None url = reverse('library_app:books_search') data = { \"count\": 1, \"next\": None, \"previous\": None, \"results\": [ {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } ] } response = self.client.get(url, {'search': '\u0442\u043e'}, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"3.2. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/get_tests/#get-","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/get_tests/#_1","text":"URL : /books/1/ class BookRetrieveTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_retrieve_book(self): url = reverse('library_app:books_retrieve', args=['1']) data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043d\u0438\u0433\u0435"},{"location":"labs/tests/get_tests/#_2","text":"URL : /readers/1/ class ReaderRetrieveTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_retrieve_reader(self): self.maxDiff = None url = reverse('library_app:readers_retrieve', args=['1']) today = str(datetime.date.today()) data = { 'id': 1, 'last_login': None, 'is_superuser': False, 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': today, 'username': '', 'password': '', 'card_number': 111, 'card_number_old': None, 'first_name': 'Lina', 'last_name': 'Anil', 'passport': '1111111111', 'date_of_birth': '1990-09-09', 'address': '...', 'phone': '89111111111', 'education': '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', 'degree': False, 'reader_hall': None, 'groups': [], 'user_permissions': [], 'reader_book': [] } request_data = {k: v for k, v in data.items() if v is not None} response = self.client.get(url, request_data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) response_data = response.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data)","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435"},{"location":"labs/tests/get_tests/#_3","text":"URL : /books/filter/search/ class BookFilterSearchTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_search_book(self): self.maxDiff = None url = reverse('library_app:books_search') data = { \"count\": 1, \"next\": None, \"previous\": None, \"results\": [ {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } ] } response = self.client.get(url, {'search': '\u0442\u043e'}, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u041f\u043e\u0438\u0441\u043a \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f\u0445 \u0438 \u0430\u0432\u0442\u043e\u0440\u0430\u0445 \u043a\u043d\u0438\u0433"},{"location":"labs/tests/model_tests/","text":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Model : Book class BookModelTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97', # book_hall=1, # book_reader=1 ) def test_book_publisher_label(self): obj = Book.objects.get(id=1) field_label = obj._meta.get_field('publisher').verbose_name self.assertEquals(field_label, '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e') \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u043e\u043b\u044f Model : Reader class ReaderModelTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( card_number=111, first_name='Lina', last_name='Anil', passport='1111111111', date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_passport_max_length(self): obj = Reader.objects.get(id=1) max_length = obj._meta.get_field('passport').max_length self.assertEquals(max_length, 10) \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u0430\u044f \u0440\u0435\u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Model : ReaderBook class ReaderBookModelTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97', # book_hall=1, # book_reader=1 ) Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) ReaderBook.objects.create( book=Book.objects.get(id=1), reader=Reader.objects.get(id=1), issue_date='2006-06-23', due_date='2006-07-08' ) def test_object_name_is_name(self): obj = ReaderBook.objects.get(id=1) expected_object_name = str(obj.reader) + \" : \" + str(obj.book) self.assertEquals(str(obj), expected_object_name)","title":"3.1. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"labs/tests/model_tests/#_1","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"},{"location":"labs/tests/model_tests/#_2","text":"Model : Book class BookModelTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97', # book_hall=1, # book_reader=1 ) def test_book_publisher_label(self): obj = Book.objects.get(id=1) field_label = obj._meta.get_field('publisher').verbose_name self.assertEquals(field_label, '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e')","title":"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/tests/model_tests/#_3","text":"Model : Reader class ReaderModelTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( card_number=111, first_name='Lina', last_name='Anil', passport='1111111111', date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_passport_max_length(self): obj = Reader.objects.get(id=1) max_length = obj._meta.get_field('passport').max_length self.assertEquals(max_length, 10)","title":"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u043e\u043b\u044f"},{"location":"labs/tests/model_tests/#_4","text":"Model : ReaderBook class ReaderBookModelTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97', # book_hall=1, # book_reader=1 ) Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) ReaderBook.objects.create( book=Book.objects.get(id=1), reader=Reader.objects.get(id=1), issue_date='2006-06-23', due_date='2006-07-08' ) def test_object_name_is_name(self): obj = ReaderBook.objects.get(id=1) expected_object_name = str(obj.reader) + \" : \" + str(obj.book) self.assertEquals(str(obj), expected_object_name)","title":"\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u0430\u044f \u0440\u0435\u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"labs/tests/post_tests/","text":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 URL : /books/create/ class BookCreateTest(TestCase): def test_create_book(self): url = reverse('library_app:books_create') data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) \u0412\u044b\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 URL : /take_out/ class ReaderBookCreateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_create_reader_book(self): self.maxDiff = None url = reverse('library_app:take_out') data = { \"id\": 1, \"issue_date\": \"1987-03-12\", \"due_date\": \"1987-04-12\", \"book\": 1, \"reader\": 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"3.3. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/post_tests/#post-","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/post_tests/#_1","text":"URL : /books/create/ class BookCreateTest(TestCase): def test_create_book(self): url = reverse('library_app:books_create') data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"labs/tests/post_tests/#_2","text":"URL : /take_out/ class ReaderBookCreateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) Reader.objects.create( first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_create_reader_book(self): self.maxDiff = None url = reverse('library_app:take_out') data = { \"id\": 1, \"issue_date\": \"1987-03-12\", \"due_date\": \"1987-04-12\", \"book\": 1, \"reader\": 1 } response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0412\u044b\u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"labs/tests/put_tests/","text":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PUT-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 URL : /books/edit/ class BookUpdateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_update_book(self): self.maxDiff = None url = reverse('library_app:books_edit', args=['1']) data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['book_cypher'] = '97a' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) \u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f URL : /readers/edit/ class ReaderUpdateTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( username='newuser', password='userpwd', first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_update_reader(self): self.maxDiff = None url = reverse('library_app:readers_edit', args=['1']) today = str(datetime.date.today()) data = { 'id': 1, 'last_login': None, 'is_superuser': False, 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': today, 'username': 'newuser', 'password': 'userpwd', 'card_number': 111, 'card_number_old': None, 'first_name': 'Lina', 'last_name': 'Anil', 'passport': '1111111111', 'date_of_birth': '1990-09-09', 'address': '...', 'phone': '89111111111', 'education': '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', 'degree': False, 'reader_hall': None, 'groups': [], 'user_permissions': [], 'reader_book': [] } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) response_data = response_retrieve.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data) data['passport'] = '2222222222' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) response_data = response_update.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data) \u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u043d\u0438\u0433\u0438 URL : /return/ class ReaderBookUpdateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) Reader.objects.create( username='newuser', password='userpwd', first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) ReaderBook.objects.create( id=1, issue_date=\"1987-03-12\", due_date=\"1987-04-12\", book=Book.objects.get(id=1), reader=Reader.objects.get(id=1), ) def test_update_reader_book(self): self.maxDiff = None url = reverse('library_app:return', args=['1']) data = { \"id\": 1, \"issue_date\": \"1987-03-12\", \"due_date\": \"1987-04-12\", \"book\": 1, \"reader\": 1 } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['due_date'] = '1987-05-12' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"3.4. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PUT-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/put_tests/#put-","text":"","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 PUT-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"labs/tests/put_tests/#_1","text":"URL : /books/edit/ class BookUpdateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) def test_update_book(self): self.maxDiff = None url = reverse('library_app:books_edit', args=['1']) data = {'id': 1, 'title': '\u0410\u044d\u043b\u0438\u0442\u0430', 'authors': '\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', 'publisher': '\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', 'publication_year': 1956, 'genre': '\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', 'book_cypher': '97', 'book_hall': [], 'book_reader': [] } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['book_cypher'] = '97a' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"\u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"labs/tests/put_tests/#_2","text":"URL : /readers/edit/ class ReaderUpdateTest(TestCase): @classmethod def setUpTestData(cls): Reader.objects.create( username='newuser', password='userpwd', first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) def test_update_reader(self): self.maxDiff = None url = reverse('library_app:readers_edit', args=['1']) today = str(datetime.date.today()) data = { 'id': 1, 'last_login': None, 'is_superuser': False, 'email': '', 'is_staff': False, 'is_active': True, 'date_joined': today, 'username': 'newuser', 'password': 'userpwd', 'card_number': 111, 'card_number_old': None, 'first_name': 'Lina', 'last_name': 'Anil', 'passport': '1111111111', 'date_of_birth': '1990-09-09', 'address': '...', 'phone': '89111111111', 'education': '\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', 'degree': False, 'reader_hall': None, 'groups': [], 'user_permissions': [], 'reader_book': [] } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) response_data = response_retrieve.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data) data['passport'] = '2222222222' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) response_data = response_update.json() response_data['date_joined'] = response_data['date_joined'][:10] self.assertEqual(response_data, data)","title":"\u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f"},{"location":"labs/tests/put_tests/#_3","text":"URL : /return/ class ReaderBookUpdateTest(TestCase): @classmethod def setUpTestData(cls): Book.objects.create( title='\u0410\u044d\u043b\u0438\u0442\u0430', authors='\u0410. \u0422\u043e\u043b\u0441\u0442\u043e\u0439', publisher='\u0420\u0443\u0441\u0441\u043a\u0430\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u0430', publication_year=1956, genre='\u0424\u0430\u043d\u0442\u0430\u0441\u0442\u0438\u043a\u0430', book_cypher='97' ) Reader.objects.create( username='newuser', password='userpwd', first_name='Lina', last_name='Anil', passport='1111111111', card_number=111, date_of_birth='1990-09-09', address='...', phone='89111111111', education='\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0431\u0449\u0435\u0435', degree=False ) ReaderBook.objects.create( id=1, issue_date=\"1987-03-12\", due_date=\"1987-04-12\", book=Book.objects.get(id=1), reader=Reader.objects.get(id=1), ) def test_update_reader_book(self): self.maxDiff = None url = reverse('library_app:return', args=['1']) data = { \"id\": 1, \"issue_date\": \"1987-03-12\", \"due_date\": \"1987-04-12\", \"book\": 1, \"reader\": 1 } response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['due_date'] = '1987-05-12' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"\u041e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u043d\u0438\u0433\u0438"},{"location":"models/book/","text":"The Book model contains the following fields. title authors publisher publication year genre book cypher halls (FK) - the halls the book is assigned to readers (FK) - the readers the book was given to","title":"Book"},{"location":"models/book_in_hall/","text":"The BookInHall model is an associative entity that connects books with the halls they are stored in. However, it contains some additional information, namely the number of instances of this book stored in this hall.","title":"Book in hall"},{"location":"models/hall/","text":"The Hall model contains the following fields. hall number hall title capacity","title":"Hall"},{"location":"models/reader/","text":"The Reader model contains the following fields. username password library card number first name last name passport date of birth address phone education degree - whether the reader has it or not hall (FK) - the hall the reader is assigned to books (FK) - the books the reader was given","title":"Reader"},{"location":"models/reader_book/","text":"The ReaderBook model is an associative entity that connects readers with the books they are currently reading. The model also contains the issue date (when the book was taken out) and due date (when the book is due back in the library).","title":"Reader book"},{"location":"user_interface/books/book_info/","text":"\u041a\u043d\u0438\u0433\u0430 URL : /books/:id \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u0435 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443","title":"\u041a\u043d\u0438\u0433\u0430"},{"location":"user_interface/books/book_info/#_1","text":"URL : /books/:id \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0435\u0439\u0447\u0430\u0441 \u043d\u0435 \u0447\u0438\u0442\u0430\u0435\u0442 \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443","title":"\u041a\u043d\u0438\u0433\u0430"},{"location":"user_interface/books/catalogue/","text":"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 URL : /books/","title":"\u041a\u0430\u0442\u0430\u043b\u043e\u0433"},{"location":"user_interface/books/catalogue/#_1","text":"URL : /books/","title":"\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"},{"location":"user_interface/books/return/","text":"\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 URL : /return/:id","title":"\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"user_interface/books/return/#_1","text":"URL : /return/:id","title":"\u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443"},{"location":"user_interface/books/take_out/","text":"\u0412\u0437\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u043e\u0442\u0435\u043a\u0435 URL : /take_out/","title":"\u0412\u0437\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0443"},{"location":"user_interface/books/take_out/#_1","text":"URL : /take_out/","title":"\u0412\u0437\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0432 \u0431\u0438\u0431\u043b\u043e\u0442\u0435\u043a\u0435"},{"location":"user_interface/home/home/","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 URL : /home/ \u041d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"user_interface/home/home/#_1","text":"URL : /home/ \u041d\u0435\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"user_interface/reader/profile/","text":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 URL : /profile/","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442"},{"location":"user_interface/reader/profile/#_1","text":"URL : /profile/","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442"},{"location":"user_interface/reader/profile_edit/","text":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0447\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 URL : /profile_edit/","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e"},{"location":"user_interface/reader/profile_edit/#_1","text":"URL : /profile_edit/","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043b\u0438\u0447\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"},{"location":"user_interface/reader/sign_in/","text":"\u0412\u0445\u043e\u0434 URL : /signin/","title":"\u0412\u0445\u043e\u0434"},{"location":"user_interface/reader/sign_in/#_1","text":"URL : /signin/","title":"\u0412\u0445\u043e\u0434"},{"location":"user_interface/reader/sign_up/","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f URL : /signup/","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"user_interface/reader/sign_up/#_1","text":"URL : /signup/","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"}]}